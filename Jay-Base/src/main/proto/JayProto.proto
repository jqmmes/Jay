syntax = "proto3";

option java_package = "pt.up.fc.dcc.hyrax.jay.proto";
option java_outer_classname = "JayProto";
import "google/protobuf/empty.proto";
import "google/protobuf/wrappers.proto";

message Job {
    string id = 1; // uuid
    bytes data = 2;
}

message JobDetails {
    string id = 1;
    int32 dataSize = 2;
}

message WorkerJob {
    string id = 1; // uuid
    string fileId = 2;
}

enum StatusCode {
    Success = 0;
    Error = 1;
    Waiting = 2;
    Received = 3;
}

message Status {
    StatusCode code = 1;
}

message Worker {
    StatusCode status = 1;

    string id = 2; // uuid

    int32 batteryLevel = 3;
    int32 batteryCurrent = 4;
    int32 batteryVoltage = 5;
    float batteryTemperature = 6;
    int64 batteryEnergy = 7;
    int32 batteryCharge = 8;

    enum BatteryStatus {
        CHARGED = 0;
        CHARGING = 1; // AC Charging
        USB = 2; // USB Charging
        DISCHARGING = 3;
    }
    BatteryStatus batteryStatus = 9;

    int32 cpuCores = 10;
    int32 queueSize = 11;
    int32 runningJobs = 12;
    int32 queuedJobs = 13;

    int64 avgTimePerJob = 14;

    enum Type {
        LOCAL = 0;
        CLOUD = 1;
        REMOTE = 2;
    }
    Type type = 15;

    float bandwidthEstimate = 16; // KB/s valor a ser calculado no Broker e enviado para o scheduler
    int64 totalMemory = 17;
    int64 freeMemory = 18;
}

message Ping {
    bytes data = 1;
    bool reply = 2;
}

message ServiceStatus {
    enum Type {
        SCHEDULER = 0;
        WORKER = 1;
        PROFILER = 2;
    }
    Type type = 1;
    bool running = 2;
}

message Scheduler {
    string id = 1;
    string name = 2;
}

message Schedulers {
    repeated Scheduler scheduler = 1;
}

message WorkerTypes {
    repeated Worker.Type type = 1;
}

message BandwidthEstimate {
    enum Type {
        ACTIVE = 0;
        PASSIVE = 1;
        ALL = 2;
    }
    Type type = 1;
    repeated Worker.Type workerType = 2;
}

message String {
    string str = 1;
}

message Weights {
    float computeTime = 1;
    float queueSize = 2;
    float runningJobs = 3;
    float battery = 4;
    float bandwidth = 5;
}

message Settings {
    map<string, string> setting = 1;
}

message TaskExecutor {
    string id = 1;
    string name = 2;
    string description = 3;
}

message TaskExecutors {
    repeated TaskExecutor taskExecutors = 1;
}

message Request {
    string request = 1;
    repeated bytes args = 2;
}

message Response {
    Status status = 1;
    bytes bytes = 2;
    string id = 3;
}

message JayState {
    enum state {
        IDLE = 0;
        DATA_SND = 1;
        DATA_RCV = 2;
        COMPUTE = 3;
    }
    state jayState = 1;
}

message Time {
    int64 value = 1;
}

message Battery {
    int32 batteryLevel = 1;
    int32 batteryCurrent = 2;
    int32 batteryVoltage = 3;
    float batteryTemperature = 4;
    int64 batteryEnergy = 5;
    int32 batteryCharge = 6;

    enum BatteryStatus {
        CHARGED = 0;
        CHARGING = 1; // AC Charging
        USB = 2; // USB Charging
        DISCHARGING = 3;
    }
    BatteryStatus batteryStatus = 7;
}

message Transport {
    enum Medium {
        WIFI = 0;
        CELLULAR = 1;
        BLUETOOTH = 2;
        ETHERNET = 3;
        VPN = 4;
        WIFI_AWARE = 5;
        LOWPAN = 6;
        UNKNOWN = 7;
    }

    enum CellularTechnology {
        SECOND_GEN = 0;
        THIRD_GEN = 1;
        FOURTH_GEN = 2;
        FIFTH_GEN = 3;
        UNKNOWN_GEN = 4;
    }


    Medium medium = 1;
    CellularTechnology cellularTechnology = 2;
    int32 downstreamBandwidth = 3;
    int32 upstreamBandwidth = 4;
}

message TimeRange {
    int64 start = 1;
    int64 end = 2;
}

message ProfileRecording {
    TimeRange timeRange = 1;
    repeated JayState jayState = 2;
    Battery battery = 3;
    int32 cpuCount = 4;
    repeated int32 cpuFrequency = 5;
    Transport transport = 6;
    repeated string systemUsage = 7;
}

message ProfileRecordings {
    repeated ProfileRecording profileRecording = 1;
}

// Internal and External communication Broker
service BrokerService {
    rpc ping (Ping) returns (Ping) {
    }; // ExternalBroker > Broker

    rpc executeJob (Job) returns (stream Response) {
    }; // ExternalBroker > Broker --> Calls WorkerService::execute
    rpc scheduleJob (Job) returns (Response) {
    }; // App > Broker --> Calls SchedulerService::schedule

    rpc advertiseWorkerStatus (Worker) returns (Status) {
    }; // ExternalBroker > Broker
    rpc diffuseWorkerStatus (Worker) returns (Status) {
    }; // WorkerService > Broker --> Calls:
    //       ExternalBroker::diffuseWorkerStatus
    //       SchedulerService::notifyWorkerUpdate
    rpc requestWorkerStatus (google.protobuf.Empty) returns (Worker) {
    }; // ExternalBroker > Broker
    //      SchedulerService::notifyWorkerUpdate

    rpc updateWorkers (google.protobuf.Empty) returns (google.protobuf.Empty) {
    }; // SchedulerService > Broker

    rpc getSchedulers (google.protobuf.Empty) returns (Schedulers) {
    }; // App > Broker --> Calls SchedulerService::listSchedulers
    rpc setScheduler (Scheduler) returns (Status) {
    }; // App > Broker --> Calls SchedulerService::setScheduler

    rpc listenMulticast (google.protobuf.BoolValue) returns (Status) {
    }; // SchedulerService --> Broker (Starts MC listen)
    rpc announceMulticast (google.protobuf.Empty) returns (Status) {
    }; // SchedulerService --> Broker (Starts MCast advertise)

    rpc enableHearBeats (WorkerTypes) returns (Status) {
    }; // SchedulerService --> Broker (start HB)
    rpc enableBandwidthEstimates (BandwidthEstimate) returns (Status) {
    }; // SchedulerService --> Broker (start RTT Estimate)
    rpc disableHearBeats (google.protobuf.Empty) returns (Status) {
    }; // SchedulerService --> Broker (start HB)
    rpc disableBandwidthEstimates (google.protobuf.Empty) returns (Status) {
    }; // SchedulerService --> Broker (start RTT Estimate)
    rpc updateSmartSchedulerWeights (Weights) returns (Status) {
    };
    rpc announceServiceStatus (ServiceStatus) returns (Status) {
    };
    rpc stopService (google.protobuf.Empty) returns (Status) {
    };

    rpc calibrateWorker (String) returns (google.protobuf.Empty) {
    };
    rpc createJob (String) returns (Response) {
    };
    rpc setSettings (Settings) returns (Status) {
    };

    rpc listTaskExecutors (google.protobuf.Empty) returns (TaskExecutors) {
    };
    rpc selectTaskExecutor (TaskExecutor) returns (Status) {
    };
    rpc callExecutorAction (Request) returns (Response) {
    };
    rpc runExecutorAction (Request) returns (Status) {
    };
    rpc setExecutorSettings (Settings) returns (Status) {
    };
}

service ProfilerService {
    // setState(STATE)  stack states
    rpc setState (JayState) returns (Status) {
    };
    // unsetState(STATE) unstack states
    rpc unSetState (JayState) returns (Status) {
    };
    // startRecording()
    rpc startRecording (google.protobuf.Empty) returns (Status) {
    };
    // stopRecording()
    rpc stopRecording (google.protobuf.Empty) returns (ProfileRecordings) {
    };
    // getDeviceStatus()
    rpc getDeviceStatus (google.protobuf.Empty) returns (ProfileRecording) {
    };
    rpc testService (google.protobuf.Empty) returns (ServiceStatus) {
    };
    rpc stopService (google.protobuf.Empty) returns (Status) {
    };
}

// Broker > SchedulerBase
service SchedulerService {
    rpc schedule (JobDetails) returns (Worker) {
    }; // Schedule a Job
    rpc notifyJobComplete (JobDetails) returns (google.protobuf.Empty) {
    }; // Report jobcompletion to scheduler
    rpc notifyWorkerUpdate (Worker) returns (Status) {
    }; // Inform about Worker updates
    rpc notifyWorkerFailure (Worker) returns (Status) {
    }; // Inform about Worker connection failures
    rpc setScheduler (Scheduler) returns (Status) {
    }; // Select Scheduler to be used
    rpc listSchedulers (google.protobuf.Empty) returns (Schedulers) {
    }; // List available Schedulers
    rpc updateSmartSchedulerWeights (Weights) returns (Status) {
    };
    rpc testService (google.protobuf.Empty) returns (ServiceStatus) {
    };
    rpc stopService (google.protobuf.Empty) returns (Status) {
    };
}

// Broker > WorkerService
service WorkerService {
    rpc execute (WorkerJob) returns (Response) {
    }; // Queue a Job for execution
    rpc testService (google.protobuf.Empty) returns (ServiceStatus) {
    };
    rpc stopService (google.protobuf.Empty) returns (Status) {
    };
    rpc listTaskExecutors (google.protobuf.Empty) returns (TaskExecutors) {
    };
    rpc selectTaskExecutor (TaskExecutor) returns (Status) {
    };
    rpc callExecutorAction (Request) returns (Response) {
    };
    rpc runExecutorAction (Request) returns (Status) {
    };
    rpc setExecutorSettings (Settings) returns (Status) {
    };
}