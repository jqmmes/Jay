syntax = "proto3";

option java_package = "pt.up.fc.dcc.hyrax.jay.proto";
option java_outer_classname = "JayProto";
import "google/protobuf/empty.proto";
import "google/protobuf/wrappers.proto";

enum StatusCode {
    Success = 0;
    Error = 1;
    Waiting = 2;
    Received = 3;
    Ready = 4;
    End = 5;
    TimedOut = 6;
}

enum BatteryStatus {
    FULL = 0;
    AC_CHARGING = 1; // AC Charging
    USB_CHARGING = 2; // USB Charging
    QI_CHARGING = 3; // Wireless Charging
    CHARGING = 4; // Charging with unknown method
    DISCHARGING = 5; // Unplugged
    UNKNOWN = 6;
}

message Task {
    string id = 1; // uuid
    bytes data = 2;
    bool localTask = 3;
    Status status = 4;
    int64 creationTimeStamp = 5;
    int64 deadlineTimeStamp = 6;

    enum Status {
        BEGIN_TRANSFER = 0;
        TRANSFER = 1;
        END_TRANSFER = 2;
    }
}

message TaskDetails {
    string id = 1;
    int32 dataSize = 2;
}

message WorkerTask {
    string id = 1; // uuid
    string fileId = 2;
}

message Status {
    StatusCode code = 1;
}

message CurrentEstimations {
    int32 idle = 1;
    int32 compute = 2;
    int32 rx = 3;
    int32 tx = 4;
    int32 batteryLevel = 5;
    int32 batteryCapacity = 6;
}

message Worker {
    StatusCode status = 1;

    string id = 2; // uuid

    int32 batteryLevel = 3;
    int32 batteryCapacity = 4;
    BatteryStatus batteryStatus = 5;

    int32 cpuCores = 6;
    int32 queueSize = 7;
    int32 runningTasks = 8;
    int32 queuedTasks = 9;

    int64 avgTimePerTask = 10;

    enum Type {
        LOCAL = 0;
        CLOUD = 1;
        REMOTE = 2;
    }
    Type type = 11;

    float bandwidthEstimate = 12;
    int64 totalMemory = 13;
    int64 freeMemory = 14;
    int64 avgResultSize = 15;
    int32 brokerPort = 16;
}

message WorkerComputeStatus {
    int32 queueSize = 1;
    int32 runningTasks = 2;
    int32 queuedTasks = 3;
    int64 avgTimePerTask = 4;
}

message Ping {
    bytes data = 1;
    bool reply = 2;
}

message ServiceStatus {
    enum Type {
        SCHEDULER = 0;
        WORKER = 1;
        PROFILER = 2;
    }
    Type type = 1;
    bool running = 2;
}

message Scheduler {
    string id = 1;
    string name = 2;
}

message Schedulers {
    repeated Scheduler scheduler = 1;
}

message WorkerTypes {
    repeated Worker.Type type = 1;
}

message BandwidthEstimate {
    enum Type {
        ACTIVE = 0;
        PASSIVE = 1;
        ALL = 2;
    }
    Type type = 1;
    repeated Worker.Type workerType = 2;
}

message String {
    string str = 1;
}

message Weights {
    float computeTime = 1;
    float queueSize = 2;
    float runningTasks = 3;
    float battery = 4;
    float bandwidth = 5;
}

message Settings {
    map<string, string> setting = 1;
}

message TaskExecutor {
    string id = 1;
    string name = 2;
    string description = 3;
}

message TaskExecutors {
    repeated TaskExecutor taskExecutors = 1;
}

message Request {
    string request = 1;
    repeated bytes args = 2;
}

message Response {
    Status status = 1;
    bytes bytes = 2;
    string id = 3;
}

message JayState {
    enum state {
        IDLE = 0;
        DATA_SND = 1;
        DATA_RCV = 2;
        COMPUTE = 3;
        MULTICAST_ADVERTISE = 4;
        MULTICAST_LISTEN = 5;
    }
    state jayState = 1;
}

message Time {
    int64 value = 1;
}

message Battery {
    int32 batteryLevel = 1;
    int32 batteryCurrent = 2;
    int32 batteryVoltage = 3;
    float batteryTemperature = 4;
    int64 batteryEnergy = 5;
    int32 batteryCharge = 6;
    int32 batteryCapacity = 7;
    BatteryStatus batteryStatus = 8;
}

message Transport {
    enum Medium {
        WIFI = 0;
        CELLULAR = 1;
        BLUETOOTH = 2;
        ETHERNET = 3;
        VPN = 4;
        WIFI_AWARE = 5;
        LOWPAN = 6;
        UNKNOWN = 7;
    }

    enum CellularTechnology {
        SECOND_GEN = 0;
        THIRD_GEN = 1;
        FOURTH_GEN = 2;
        FIFTH_GEN = 3;
        UNKNOWN_GEN = 4;
    }

    Medium medium = 1;
    CellularTechnology cellularTechnology = 2;
    int32 downstreamBandwidth = 3;
    int32 upstreamBandwidth = 4;
}

message TimeRange {
    int64 start = 1;
    int64 end = 2;
}

message ProfileRecording {
    TimeRange timeRange = 1;
    repeated JayState jayState = 2;
    Battery battery = 3;
    int32 cpuCount = 4;
    repeated int64 cpuFrequency = 5;
    Transport transport = 6;
    repeated string systemUsage = 7;
    int64 totalMemory = 8;
    int64 freeMemory = 9;
    repeated string sensors = 10;
}

message ProfileRecordings {
    repeated ProfileRecording profileRecording = 1;
}

message TaskInfo {
    string path = 1;
    int64 deadline = 2;
}

// Internal and External communication Broker
service BrokerService {
    rpc ping (Ping) returns (Ping) {
    }; // ExternalBroker > Broker

    rpc executeTask (stream Task) returns (stream Response) {
    }; // ExternalBroker > Broker --> Calls WorkerService::execute
    rpc scheduleTask (Task) returns (Response) {
    }; // App > Broker --> Calls SchedulerService::schedule

    //       SchedulerService::notifyWorkerUpdate
    rpc requestWorkerStatus (google.protobuf.Empty) returns (Worker) {
    }; // ExternalBroker > Broker
    //      SchedulerService::notifyWorkerUpdate

    rpc notifySchedulerForAvailableWorkers (google.protobuf.Empty) returns (google.protobuf.Empty) {
    }; // SchedulerService > Broker

    rpc getSchedulers (google.protobuf.Empty) returns (Schedulers) {
    }; // App > Broker --> Calls SchedulerService::listSchedulers
    rpc setScheduler (Scheduler) returns (Status) {
    }; // App > Broker --> Calls SchedulerService::setScheduler

    rpc setSchedulerSettings (Settings) returns (Status) {
    };

    rpc listenMulticast (google.protobuf.BoolValue) returns (Status) {
    }; // SchedulerService --> Broker (Starts MC listen)
    rpc announceMulticast (google.protobuf.Empty) returns (Status) {
    }; // SchedulerService --> Broker (Starts MCast advertise)

    rpc enableHearBeats (WorkerTypes) returns (Status) {
    }; // SchedulerService --> Broker (start HB)
    rpc enableBandwidthEstimates (BandwidthEstimate) returns (Status) {
    }; // SchedulerService --> Broker (start RTT Estimate)
    rpc disableHearBeats (google.protobuf.Empty) returns (Status) {
    }; // SchedulerService --> Broker (start HB)
    rpc disableBandwidthEstimates (google.protobuf.Empty) returns (Status) {
    }; // SchedulerService --> Broker (start RTT Estimate)
    rpc enableWorkerStatusAdvertisement (google.protobuf.Empty) returns (Status) {
    }
    rpc disableWorkerStatusAdvertisement (google.protobuf.Empty) returns (Status) {
    }

    rpc announceServiceStatus (ServiceStatus) returns (Status) {
    };
    rpc stopService (google.protobuf.Empty) returns (Status) {
    };

    rpc calibrateWorker (String) returns (google.protobuf.Empty) {
    };
    rpc createTask (TaskInfo) returns (Response) {
    };
    rpc setSettings (Settings) returns (Status) {
    };

    rpc listTaskExecutors (google.protobuf.Empty) returns (TaskExecutors) {
    };
    rpc selectTaskExecutor (TaskExecutor) returns (Status) {
    };
    rpc callExecutorAction (Request) returns (Response) {
    };
    rpc runExecutorAction (Request) returns (Status) {
    };
    rpc setExecutorSettings (Settings) returns (Status) {
    };

    rpc getExpectedCurrent (google.protobuf.Empty) returns (CurrentEstimations) {
    };

    rpc getExpectedCurrentFromRemote (Worker) returns (CurrentEstimations) {
    };

    rpc networkBenchmark (Task) returns (google.protobuf.Empty) {
    };
}

service ProfilerService {
    // setState(STATE)  stack states
    rpc setState (JayState) returns (Status) {
    };
    // unsetState(STATE) unstack states
    rpc unSetState (JayState) returns (Status) {
    };
    // startRecording()
    rpc startRecording (google.protobuf.Empty) returns (Status) {
    };
    // stopRecording()
    rpc stopRecording (google.protobuf.Empty) returns (ProfileRecordings) {
    };
    // getDeviceStatus()
    rpc getDeviceStatus (google.protobuf.Empty) returns (ProfileRecording) {
    };
    rpc getExpectedCurrent (google.protobuf.Empty) returns (CurrentEstimations) {
    };
    rpc testService (google.protobuf.Empty) returns (ServiceStatus) {
    };
    rpc stopService (google.protobuf.Empty) returns (Status) {
    };
}

// Broker > SchedulerBase
service SchedulerService {
    rpc schedule (TaskDetails) returns (Worker) {
    }; // Schedule a Task
    rpc notifyTaskComplete (TaskDetails) returns (google.protobuf.Empty) {
    }; // Report Task completion to scheduler
    rpc notifyWorkerUpdate (Worker) returns (Status) {
    }; // Inform about Worker updates
    rpc notifyWorkerFailure (Worker) returns (Status) {
    }; // Inform about Worker connection failures
    rpc setScheduler (Scheduler) returns (Status) {
    }; // Select Scheduler to be used
    rpc listSchedulers (google.protobuf.Empty) returns (Schedulers) {
    }; // List available Schedulers
    rpc testService (google.protobuf.Empty) returns (ServiceStatus) {
    };
    rpc stopService (google.protobuf.Empty) returns (Status) {
    };
    rpc setSchedulerSettings (Settings) returns (Status) {
    };
}

// Broker > WorkerService
service WorkerService {
    rpc execute (WorkerTask) returns (Response) {
    }; // Queue a Task for execution
    rpc testService (google.protobuf.Empty) returns (ServiceStatus) {
    };
    rpc stopService (google.protobuf.Empty) returns (Status) {
    };
    rpc listTaskExecutors (google.protobuf.Empty) returns (TaskExecutors) {
    };
    rpc selectTaskExecutor (TaskExecutor) returns (Status) {
    };
    rpc callExecutorAction (Request) returns (Response) {
    };
    rpc runExecutorAction (Request) returns (Status) {
    };
    rpc setExecutorSettings (Settings) returns (Status) {
    };
    rpc getWorkerStatus (google.protobuf.Empty) returns (WorkerComputeStatus) {
    }
}