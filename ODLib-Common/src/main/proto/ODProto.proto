syntax = "proto3";

option java_package = "pt.up.fc.dcc.hyrax.odlib.protoc";
option java_outer_classname = "ODProto";
import "google/protobuf/empty.proto";
import "google/protobuf/wrappers.proto";


message Detection {
    float score = 1;
    int32 class = 3;
}

message Job {
    string id = 1; // uuid
    bytes data = 2;
}

enum StatusCode {
    Success = 0;
    Error = 1;
    Waiting = 2;
}

message Status {
    StatusCode code = 1;
}

message Results {
    StatusCode status = 1;
    repeated Detection detections = 2;
    string id = 3; // uuid
}

message Models {
    repeated Model models = 1;
}

message Model {
    int32 id = 1;
    string name = 2;
    string url = 3;
    bool downloaded = 4;
}

message ModelConfig {
    Model model = 1;
    map<string, string> configs = 2;
}

message Worker {
    StatusCode status = 1;

    string id = 2; // uuid

    int32 battery = 3;

    enum BatteryStatus {
        CHARGED = 0;
        CHARGING = 1; // AC Charging
        USB = 2; // USB Charging
        DISCHARGING = 3;
    }
    BatteryStatus batteryStatus = 4;

    int32 cpuCores = 5;
    int32 queueSize = 6;
    int32 runningJobs = 7;
    int32 queuedJobs = 8;

    int64 avgTimePerJob = 9;

    enum Type {
        LOCAL = 0;
        CLOUD = 1;
        REMOTE = 2;
    }
    Type type = 10;

    float bandwidthEstimate = 11; // KB/s valor a ser calculado no Broker e enviado para o scheduler
    int64 totalMemory = 12;
    int64 freeMemory = 13;

}

message Ping {
    bytes data = 1;
    bool reply = 2;
}

message ServiceStatus {
    enum Type {
        SCHEDULER = 0;
        WORKER = 1;
    }
    Type type = 1;
    bool running = 2;
}

message Scheduler {
    string id = 1;
    string name = 2;
}

message Schedulers {
    repeated Scheduler scheduler = 1;
}

message WorkerTypes {
    repeated Worker.Type type = 1;
}

message BandwidthEstimate {
    enum Type {
        ACTIVE = 0;
        PASSIVE = 1;
    }
    Type type = 1;
    repeated Worker.Type workerType = 2;
}

message String {
    string str = 1;
}

message Weights {
    float computeTime = 1;
    float queueSize = 2;
    float runningJobs = 3;
    float battery = 4;
    float bandwidth = 5;
}

service BrokerService { // Internal and External communication Broker
                        rpc ping (Ping) returns (Ping) {}; // ExternalBroker > Broker

                        rpc executeJob (Job) returns (Results) {}; // ExternalBroker > Broker --> Calls WorkerService::execute
                        rpc scheduleJob (Job) returns (Results) {}; // App > Broker --> Calls SchedulerService::schedule

                        rpc advertiseWorkerStatus (Worker) returns (Status) {}; // ExternalBroker > Broker
                        rpc diffuseWorkerStatus (Worker) returns (Status) {}; // WorkerService > Broker --> Calls:
                        //          ExternalBroker::diffuseWorkerStatus
                        //          SchedulerService::notifyWorkerUpdate
                        rpc requestWorkerStatus(google.protobuf.Empty) returns (Worker) {}; // ExternalBroker > Broker
                        //      SchedulerService::notifyWorkerUpdate

                        rpc getModels (google.protobuf.Empty) returns (Models) {}; // App > Broker --> Calls WorkerService::listModels
                        rpc setModel (Model) returns (Status) {}; // App > Broker --> Calls WorkerService::selectModel

                        rpc updateWorkers (google.protobuf.Empty) returns (google.protobuf.Empty) {}; // SchedulerService > Broker

                        rpc getSchedulers (google.protobuf.Empty) returns (Schedulers) {}; // App > Broker --> Calls SchedulerService::listSchedulers
                        rpc setScheduler (Scheduler) returns (Status) {}; // App > Broker --> Calls SchedulerService::setScheduler

                        rpc listenMulticast (google.protobuf.BoolValue) returns (Status) {}; // SchedulerService --> Broker (Starts MC listen)
                        rpc announceMulticast (google.protobuf.Empty) returns (Status) {}; // SchedulerService --> Broker (Starts MCast advertise)

                        rpc enableHearBeats (WorkerTypes) returns (Status) {}; // SchedulerService --> Broker (start HB)
                        rpc enableBandwidthEstimates (BandwidthEstimate) returns (Status) {}; // SchedulerService --> Broker (start RTT Estimate)
                        rpc disableHearBeats (google.protobuf.Empty) returns (Status) {}; // SchedulerService --> Broker (start HB)
                        rpc disableBandwidthEstimates (google.protobuf.Empty) returns (Status) {}; // SchedulerService --> Broker (start RTT Estimate)
                        rpc updateSmartSchedulerWeights (Weights) returns (Status) {};
                        rpc announceServiceStatus (ServiceStatus) returns (Status) {};
                        rpc stopService (google.protobuf.Empty) returns (Status) {};

                        rpc calibrateWorker(Job) returns (google.protobuf.Empty) {};
                        rpc createJob(String) returns (Results) {};
}

service SchedulerService { // Broker > SchedulerBase
                           rpc schedule (Job) returns (Worker) {}; // Schedule a Job
                           rpc notifyWorkerUpdate (Worker) returns (Status) {}; // Inform about Worker updates
                           rpc notifyWorkerFailure (Worker) returns (Status) {}; // Inform about Worker connection failures
                           rpc setScheduler (Scheduler) returns (Status) {}; // Select Scheduler to be used
                           rpc listSchedulers (google.protobuf.Empty) returns (Schedulers) {}; // List available Schedulers
                           rpc updateSmartSchedulerWeights (Weights) returns (Status) {};
                           rpc testService (google.protobuf.Empty) returns (ServiceStatus) {};
                           rpc stopService (google.protobuf.Empty) returns (Status) {
                           };
}

service WorkerService { // Broker > WorkerService
                        rpc execute (Job) returns (Results) {}; // Queue a Job for execution
                        rpc selectModel (Model) returns (Status) {}; // Select TF Model to be used
                        rpc listModels (google.protobuf.Empty) returns (Models) {}; // List available TF Models
                        rpc testService (google.protobuf.Empty) returns (ServiceStatus) {};
                        rpc stopService (google.protobuf.Empty) returns (Status) {
                        };
}