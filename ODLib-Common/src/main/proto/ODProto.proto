syntax = "proto3";

option java_package = "pt.up.fc.dcc.hyrax.odlib.protoc";
option java_outer_classname = "ODProto";
import "google/protobuf/empty.proto";
import "google/protobuf/wrappers.proto";


message Detection {
    float score = 1;
    int32 class = 3;
}

message Job {
    string id = 1; // uuid
    bytes data = 2;
}

message Status {
    enum Code {
        Success = 0;
        Error = 1;
        Waiting = 2;
    }
    Code code = 1;
}

message Results {
    Status.Code status = 1;
    repeated Detection detections = 2;
    string id = 3; // uuid
}

message Models {
    repeated Model models = 1;
}

message Model {
    int32 id = 1;
    string name = 2;
    string url = 3;
    bool downloaded = 4;
}

message ModelConfig {
    Model model = 1;
    map<string, string> configs = 2;
}

message Worker {
    Status.Code status = 1;

    string id = 2; // uuid

    int32 battery = 3;

    enum BatteryStatus {
        CHARGED = 0;
        CHARGING = 1;
        USB = 2;
        DISCHARGING = 3;
    }

    BatteryStatus batteryStatus = 4;

    int32 cpuCores = 5;
    int32 queueSize = 6;
    int32 runningJobs = 7;

    int32 avgTimePerJob = 8;
    enum Type {
        LOCAL = 0;
        CLOUD = 1;
        REMOTE = 2;
    }
    Type type = 9;
    //int32 bandwidthEstimate = 9; // KB/s Este valor não pode ser alterado após recebido o pacote. Não faz sentido

}

message Ping {
    bytes data = 1;
    bool reply = 2;
}

message Service {
    enum Type {
        SCHEDULER = 0;
        WORKER = 1;
    }
    Type type = 1;
    bool running = 2;
}

message ServiceStatus {
    repeated Service service = 1;
}

message ServiceRequest {
    repeated Service.Type type = 1;
}

message Scheduler {
    string id = 1;
    string name = 2;
}

message Schedulers {
    repeated Scheduler scheduler = 1;
}

service BrokerService { // Internal and External communication Broker
                        rpc ping (Ping) returns (Ping) {}; // ExternalBroker > Broker

                        rpc executeJob (Job) returns (Results) {}; // ExternalBroker > Broker --> Calls WorkerService::execute
                        rpc scheduleJob (Job) returns (Results) {}; // App > Broker --> Calls SchedulerService::schedule

                        rpc advertiseWorkerStatus(Worker) returns (Status) {}; // ExternalBroker > Broker
                        rpc diffuseWorkerStatus(Worker) returns (Status) {}; // WorkerService > Broker --> Calls:
                        //          ExternalBroker::advertiseWorkerStatus
                        //          SchedulerService::notify

                        rpc getModels (google.protobuf.Empty) returns (Models) {}; // App > Broker --> Calls WorkerService::listModels
                        rpc setModel (Model) returns (Status) {}; // App > Broker --> Calls WorkerService::selectModel

                        rpc updateWorkers (google.protobuf.Empty) returns (google.protobuf.Empty) {}; // SchedulerService > Broker

                        rpc getSchedulers (google.protobuf.Empty) returns (Schedulers) {}; // App > Broker --> Calls SchedulerService::listSchedulers
                        rpc setScheduler (Scheduler) returns (Status) {
                        }; // App > Broker --> Calls SchedulerService::setScheduler


                        rpc listenMulticast (google.protobuf.BoolValue) returns (Status) {
                        }; // SchedulerService --> Broker (Starts MC listen)
                        rpc announceMulticast (Worker) returns (Status) {
                        }; // SchedulerService --> Broker (Starts MCast advertise)
}

service SchedulerService {                                             // Broker > SchedulerBase
    rpc schedule (Job) returns (Worker) {};                            // Schedule a Job
    rpc notify (Worker) returns (Status) {};                           // Inform about Worker updates
    rpc setScheduler (Scheduler) returns (Status) {};                  // Select Scheduler to be used
    rpc listSchedulers(google.protobuf.Empty) returns (Schedulers) {}; // List available Schedulers
}

service WorkerService {                                           // Broker > WorkerService
    rpc execute (Job) returns (Results) {};                       // Queue a Job for execution
    rpc selectModel (Model) returns (Status) {};                  // Select TF Model to be used
    rpc listModels (google.protobuf.Empty) returns (Models) {};   // List available TF Models
}