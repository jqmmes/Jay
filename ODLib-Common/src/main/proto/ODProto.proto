syntax = "proto3";

option java_package = "pt.up.fc.dcc.hyrax.odlib.protoc";
option java_outer_classname = "ODProto";
import "google/protobuf/empty.proto";


message Detection {
    float score = 1;
    int32 class = 3;
}

message Job {
    string id = 1; // uuid
    bytes data = 2;
}

message Status {
    enum Code {
        Success = 0;
        Error = 1;
        Waiting = 2;
    }
    Code code = 1;
}

message Results {
    Status.Code status = 1;
    repeated Detection detections = 2;
    string id = 3; // uuid
}

message Models {
    repeated Model models = 1;
}

message Model {
    int32 id = 1;
    string name = 2;
    string url = 3;
    bool downloaded = 4;
}

message ModelConfig {
    Model model = 1;
    map<string, string> configs = 2;
}

message Worker {
    Status.Code status = 1;

    string id = 2; // uuid

    int32 battery = 3;

    enum BatteryStatus {
        CHARGED = 0;
        CHARGING = 1;
        USB = 2;
        DISCHARGING = 3;
    }

    int32 batteryStatus = 4;

    int32 cpuCores = 5;
    int32 queueSize = 6;
    int32 runningJobs = 7;

    int32 avgTimePerJob = 8;
    int32 bandwidthEstimate = 9; // KB/s
}

message Ping {
    bytes data = 1;
    bool reply = 2;
}

message Service {
    enum Type {
        SCHEDULER = 0;
        WORKER = 1;
    }
    Type type = 1;
    bool running = 2;
}

message ServiceStatus {
    repeated Service service = 1;
}

message ServiceRequest {
    repeated Service.Type type = 1;
}

message Scheduler {
    enum Type {
        STATIC = 0;
        DYNAMIC = 1;
    }
    enum StaticType {
        DEVICE = 0;
        CLOUD = 1;
        ROUND_ROBIN = 2;
    }
    enum DynamicType {
        SMART = 0;
    }
    Type type = 1;
}

message Schedulers {
    repeated Scheduler scheduler = 1;
}

service BrokerService {
    rpc ping (Ping) returns (Ping) {};
    rpc executeJob (Job) returns (Results) {}; // Send to Worker
    rpc scheduleJob (Job) returns (Results) {}; // Send to SchedulerBase
    //rpc getServiceStatus(ServiceRequest) returns (ServiceStatus) {};
    //rpc advertiseServiceStatus(ServiceStatus) returns (Status) {};
    rpc advertiseWorkerStatus(Worker) returns (Status) {}; // Broker Externo > Broker
    rpc diffuseWorkerStatus(Worker) returns (Status) {}; // Worker > Broker
    rpc updateWorkers(google.protobuf.Empty) returns (google.protobuf.Empty) {};

    rpc getModels(google.protobuf.Empty) returns (Models) {};
    rpc setModel(Model) returns (Status) {};

}

service SchedulerService { // Broker interno > SchedulerBase
    rpc schedule (Job) returns (Worker) {};
    rpc notify (Worker) returns (Status) {};
    rpc setScheduler (Scheduler) returns (Status) {};
    rpc listSchedulers(google.protobuf.Empty) returns (Schedulers) {};
}

service WorkerService { // Broker interno > Worker
    rpc execute (Job) returns (Results) {};
    rpc selectModel (Model) returns (Status) {};
    rpc listModels (google.protobuf.Empty) returns (Models) {};
}

